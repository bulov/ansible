
- hosts: all
  vars:
#       GUdownLoad:  download.fedoraproject.org/pub/fedora/linux/releases/33/Workstation/x86_64/iso
#       GUisoName:   Fedora-Workstation-Live
#       GUisoFile:   Fedora-Workstation-Live-x86_64-33-1.2.iso
#       GUcheckFile: Fedora-Workstation-33-1.2-x86_64-CHECKSUM

       GUdownLoad:  download.fedoraproject.org/pub/fedora/linux/releases/33/Server/x86_64/iso
       GUisoName:   Fedora-Server-dvd
       GUisoFile:   Fedora-Server-dvd-x86_64-33-1.2.iso
       GUcheckFile: Fedora-Server-33-1.2-x86_64-CHECKSUM

       nginxRoot:   /opt/nginx/upload
       mntISO:      /mnt/iso/{{GUisoName}}
       tftpRoot:    /var/lib/tftpboot
       menuBoot:    "/home/ansible/ansible/SRC/pxelinux.cfg/default"

  tasks:

  - name: wget {{ GUisoName }}  checksum
    get_url:
       url: "https://{{ GUdownLoad }}/{{ GUcheckFile }}"
       dest: "{{ nginxRoot }}/{{ GUcheckFile }}"
    register: rc

  - name: wget {{ GUisoName }}  iso
    stat:
       path: "{{ nginxRoot }}/{{ GUcheckFile }}"
    register: c
  - stat:
       path: "{{ nginxRoot }}/{{ GUisoFile }}"
    register: i
#  - debug: msg={{c}}
#  - debug: msg={{i}}
#  - debug: msg="{{nginxRoot}}"
#  - debug: msg="{{GUisoFile}}"
  - shell: "[ $(grep SHA256.*{{GUisoName}} {{ nginxRoot }}/{{ GUcheckFile }} | cut -d' ' -f4) == $(sha256sum {{nginxRoot }}/{{ GUisoFile }} | cut -d\" \" -f1) ]"
    register: rc
    changed_when: true
    when: true == c.stat.exists and true == i.stat.exists
  - get_url:
       url: "https://{{ GUdownLoad }}/{{ GUisoFile }}"
       dest: "{{ nginxRoot }}"
       checksum: sha256:{{ lookup('pipe', 'grep SHA256.*{{GUisoName}} {{ nginxRoot }}/{{ GUcheckFile }} | cut -d= -f2' ) }}
       force: no
       timeout: 20
    when:  true != i.stat.exists or 0 != rc.rc

  - name: Mount DVD read-only see /etc/fstab
    ansible.builtin.file:
       path: "{{ mntISO }}"
       state: directory
  - mount:
       path: "{{ mntISO }}"
       src: "{{ nginxRoot }}/{{ GUisoFile }}"
       fstype: iso9660
       opts: ro,noauto
       state: mounted
    become: yes

  - name: install the latest version of package
    package:
       name:
#        - vsftpd
#        - syslinux
         - pykickstart
         - nginx
         - dnsmasq 
         - tftp-server
         - syslinux-tftpboot
         - tftp
       state: latest
    become: yes

  - name:  tuning /etc/dnsmasq.conf
    lineinfile:
          dest: /etc/dnsmasq.conf
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
          state: present
          backup: yes
    with_items:
        - { regexp: '^interface=',   line: "interface=enp9s0" }
        - { regexp: '^log-dhcp',     line: "log-dhcp" }
        - { regexp: '^dhcp-range=',  line: "dhcp-range=192.168.122.200,192.168.122.250,24h" }
#        - { regexp: '^dhcp-boot=',   line: "dhcp-boot=pxelinux.0,192.168.122.1" }
        - { regexp: '^dhcp-boot=',   line: "dhcp-boot=pxelinux.0" }
        - { regexp: '^pxe-service=', line: "pxe-service=x86PC,\"Automatic Network Boot\",pxelinux" }
        - { regexp: '^enable-tftp',  line: "enable-tftp" }
        - { regexp: '^tftp-root=',   line: "tftp-root={{ tftpRoot }}" }
        - { regexp: '^port=',        line: "port=0" }

  - name:  Setup TFTP directory
    copy:
       src:  "{{ item.s }}"
       dest: "{{ item.d }}"
    with_items:
       - { s: '{{ mntISO }}/images/pxeboot/initrd.img' ,d: '{{ tftpRoot }}' }
       - { s: '{{ mntISO }}/images/pxeboot/vmlinuz'    ,d: '{{ tftpRoot }}' }
       - { s: '/tftpboot/pxelinux.0'                   ,d: '{{ tftpRoot }}' }
       - { s: '/tftpboot/vesamenu.c32'                 ,d: '{{ tftpRoot }}' }
       - { s: '/tftpboot/menu.c32'                     ,d: '{{ tftpRoot }}' }
       - { s: '/tftpboot/ldlinux.c32'                  ,d: '{{ tftpRoot }}' }
       - { s: '/tftpboot/libcom32.c32'                 ,d: '{{ tftpRoot }}' }
       - { s: '/tftpboot/libutil.c32'                  ,d: '{{ tftpRoot }}' }
       - { s: '{{ menuBoot }}'                         ,d: '{{ tftpRoot }}/pxelinux.cfg/default' }

  - name: nginx /etc/nginx/default.d/download.conf
    copy:
       content: "# download \n
           autoindex on;               # enable directory listing output\n
           autoindex_exact_size off;   # output file sizes rounded to kilobytes, megabytes, and gigabytes\n
           autoindex_localtime on;     # output local times in the directory\n
           location / {\n
               root {{ nginxRoot }};\n
           }
       "
       dest: /etc/nginx/default.d/download.conf

  - name: nginx /etc/nginx/default.d/status.conf
    copy:
       content: "\n
       location /nginx_status {\n
           stub_status on;\n
           access_log   off;\n
           allow 192.168.2.0/24;\n
           allow 192.168.122.0/24;\n
           allow 127.0.0.1;\n
           deny all;\n
       }"
       dest: /etc/nginx/default.d/status.conf

# Gather status info from nginx on localhost with a custom timeout of 20 seconds
# ansible-galaxy collection install community.general !!!
  - name: Get current http stats and ftp
    community.general.nginx_status_info:
      url: http://localhost/nginx_status
      timeout: 20
    register: result

  - name: open firewalld
    firewalld:
       service:   "{{ item }}"
       permanent: true
       state:     enabled
    with_items:
           - https
           - http
           - dhcp
           - tftp
  - firewalld:
       port:      4011/udp
       permanent: yes
       state:     enabled



  - name: Make sure a service is running
    systemd:
       name:    "{{ item }}"
       state:   reloaded
       enabled: yes
    with_items:
       - firewalld
       - dnsmasq.service
       - nginx
